# Generated by Django 3.2.9 on 2021-12-23 09:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('address', models.CharField(max_length=254)),
                ('city', models.CharField(max_length=254)),
                ('state', models.CharField(choices=[('Andaman and Nicobar Islands', 'Andaman and Nicobar Islands'),
                                                    ('Andhra Pradesh', 'Andhra Pradesh'),
                                                    ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Assam', 'Assam'),
                                                    ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'),
                                                    ('Chandigarh', 'Chandigarh'),
                                                    ('Dadra and Nagar Haveli', 'Dadra and Nagar Haveli'),
                                                    ('Daman and Diu', 'Daman and Diu'), ('Delhi', 'Delhi'),
                                                    ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'),
                                                    ('Himachal Pradesh', 'Himachal Pradesh'),
                                                    ('Jammu and Kashmir', 'Jammu and Kashmir'),
                                                    ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'),
                                                    ('Kerala', 'Kerala'), ('Ladakh', 'Ladakh'),
                                                    ('Lakshadweep', 'Lakshadweep'),
                                                    ('Madhya Pradesh', 'Madhya Pradesh'),
                                                    ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'),
                                                    ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'),
                                                    ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'),
                                                    ('Puducherry', 'Puducherry'), ('Punjab', 'Punjab'),
                                                    ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'),
                                                    ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'),
                                                    ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'),
                                                    ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal')],
                                           max_length=254)),
                ('pincode', models.CharField(max_length=6, validators=[
                    django.core.validators.RegexValidator('^[1-9][0-9]{5}$', 'Enter a valid pincode.', 'invalid')])),
                ('landmark', models.CharField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserContact',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('mobile', models.CharField(max_length=10, unique=True, validators=[
                    django.core.validators.RegexValidator('^(?:(?:\\+|0{0,2})91(\\s*[\\-]\\s*)?|[0]?)?[789]\\d{9}$',
                                                          'Enter a valid mobile number.', 'invalid')])),
                ('additional_mobile', models.CharField(blank=True, max_length=10, null=True, validators=[
                    django.core.validators.RegexValidator('^(?:(?:\\+|0{0,2})91(\\s*[\\-]\\s*)?|[0]?)?[789]\\d{9}$',
                                                          'Enter a valid mobile number.', 'invalid')])),
                ('additional_email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserKyc',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('pan', models.CharField(max_length=10, unique=True, validators=[
                    django.core.validators.RegexValidator(code='Invalid PAN', message='Enter valid PAN',
                                                          regex='^([a-zA-Z]{5})(\\d{4})([a-zA-Z]{1})$')])),
                ('aadhaar', models.CharField(max_length=12, unique=True, validators=[
                    django.core.validators.RegexValidator(code='Invalid Aadhaar', message='Enter valid Aadhaar',
                                                          regex='^\\d{12}$')])),
            ],
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=6)),
                ('dob', models.DateField()),
                ('address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 to='users.useraddress')),
                ('contact', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 to='users.usercontact')),
                ('kyc', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to='users.userkyc')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('first_name', models.TextField(editable=False, null=True)),
                ('middle_name', models.TextField(blank=True, editable=False, null=True)),
                ('last_name', models.TextField(blank=True, editable=False, null=True)),
                ('test', models.CharField(blank=True, editable=False, max_length=254, null=True)),
                ('additional_info',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='users.userdetail')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['first_name', 'middle_name', 'last_name'],
                'unique_together': {('email', 'first_name', 'middle_name', 'last_name')},
            },
        ),
    ]
